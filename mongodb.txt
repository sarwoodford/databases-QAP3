const mongoose = require('mongoose');

const MONGO_URI = 'mongodb+srv://sarawoodford6:SaraMongo@qap3.gb0es.mongodb.net/';

mongoose.connect(MONGO_URI)
    .then(() => app.listen(PORT, () => console.log(`Server is running on http://localhost:${PORT}`)))
    .catch(err => console.error("Error connecting to MongoDB:", err));

// establish schema

const bookSchema = new mongoose.Schema({
    title: { type: String, required: true, trim: true },
    author: { type: String, required: true, trim: true},
    genre: { type: String, required: true, trim: true},
    year: { type: Number, required: true, min: 1}
});

const Book = mongoose.model('Book', bookSchema);

// mongoDB ( task 2 )

const insertBooks = async () => {
    const bookData = [
        { title: 'The Hobbit', author: 'JRR Tolkien', genre: 'Fantasy', year: 1937},
        { title: 'To Kill a Mockingbird', author: 'Harper Lee', genre: 'Fiction', year: 1960},
        { title: '1984', author: 'George Orwell', genre: 'Dystopian', year: 1949}
    ];

    try{
        await Book.insertMany(bookData);
        console.log("Books Inserted Successfully")
    }
    catch ( error ){
        console.log('Error Inserting Books.');
    }
}

async function getBookTitles() {
    const titles = await Book.find({}, { title: 1, _id: 0});

    if (titles.length === 0) {
        console.log("No Books Available.")
    }
    else {
        console.log("All Book Titles: ");
        titles.forEach((book) => {
            console.log(book.title);
        });
    }
}

async function findBooksByAuthor(authorName) {
    
    // general query to find authored items 
    const books = await Book.find({ author: authorName })

    // specific queriy specified in rubric below
    //const books = await Book.find({ author: 'JRR Tolkien' });

    if(books.length === 0) {
        console.log(`No Books Found By ${authorName}`);
    }
    else{
        console.log(`Books Written by ${authorName}: `)
        books.forEach((book) => {
            console.log(`Title: ${book.title} - Genre: ${book.genre} - Year: ${book.year}`);
        });
    }
}

async function updateBookGenre(title, updatedGenre) {

    // general query
    const result = await Book.updateOne({ title: title }, { $set: { genre: updatedGenre }});

    // query specified in rubric below
    //const result = await Book.updateOne({ title: '1984' }, { $set: { genre : 'Science Fiction' }});

    if(result.matchedCount === 0) {
        console.log(`Book Not Found.`);
    }
    else {
        console.log(`Updated ${book.title} Genre to ${updatedGenre}`);
    }
}

async function deleteBook(title) {
    
    // general query
    const result = await Book.deleteOne({ title: title });

    // query specified in rubric below 
    //const result = await Book.deleteOne({ title: 'The Hobbit' });

    if(result.deletedCount > 0) {
        console.log(`Book "${title}" deleted`)
    }
    else{
        console.log(`Book Not Found.`)
    }
}

async function main() {
    const command = process.argv[2];
    switch(command) {

        case 'titles' : {
            await getBookTitles();
            break;
        }

        case 'find': {
            const authorName = process.argv[3];

            if(!authorName) {
                console.log('Usage: node index.js find <author_name>');
                break;
            }

            await findBooksByAuthor(authorName);
            break;
        }
        
        case 'update': {
            const title = process.argv[3];
            const updatedGenre = process.argv[4];
            
            if(!title || !updatedGenre) {
                console.log('Usage: node index.js update <title> <updatedGenre>');
                break;
            }

            await updateBookGenre(title, updatedGenre);
            break;
        }

        case 'delete': {
            const title = process.argv[3];

            if(!title) {
                console.log('Usage: node index.js delete <title>');
                break;
            }

            await deleteBook(title);
            break;
        }

        default :
            console.log('Usage: node index.js <command> [argument(s)]');
            console.log('Commands: titles, find, update, delete');
    }
    mongoose.connection.close();
}

main().catch((error) => {
    console.error(error);
    mongoose.connection.close();
});